name: Build, Test, Scan, and Push Docker Image to ECR

on:
  pull_request:
    branches:
      - main
    paths:
      - 'node-app/**' # Run the action only if changes are in the ~/node-app folder

env:
  REPO_NAME: 'temp-converter' # Replace with your ECR repository name
  NODE_VERSION: '22'     # Specify Node.js version as an environment variable

defaults:
  run:
    working-directory: ./node-app # Set the working directory to ~/node-app

jobs:
  # Job 1: Talisman check
  talisman-check:
    name: Run Talisman Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download and Install Talisman
        run: |
          curl -L https://thoughtworks.github.io/talisman/install.sh | bash
          chmod +x talisman

      - name: Run Talisman Check
        env:
          TERM: dumb
        run: ./talisman --scan-all --no-color

  # Job 2: Run NPM tests
  npm-test:
    name: Run NPM Test Cases
    runs-on: ubuntu-latest
    needs: talisman-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  # Job 3: Build Docker image
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [talisman-check, npm-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get short SHA for tagging
        id: get-sha
        run: echo "SHORT_SHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV

      - name: Build Docker image
        id: build-image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:${{ env.SHORT_SHA }}
          docker build --platform linux/amd64 -t $IMAGE_URI .
        env:
          SHORT_SHA: ${{ steps.get-sha.outputs.SHORT_SHA }}

  # Job 4: Scan Docker image for vulnerabilities
  image-scan:
    name: Scan Docker Image for Vulnerabilities
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          chmod +x trivy

      - name: Scan Docker image
        run: |
          IMAGE_URI=${{ steps.docker-build.outputs.IMAGE_URI }}
          ./trivy image --exit-code 1 --severity HIGH,CRITICAL $IMAGE_URI

  # Job 5: Push Docker image to ECR
  docker-push:
    name: Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: [talisman-check, npm-test, image-scan] # Push only if all previous jobs pass
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Docker image to ECR
        run: |
          IMAGE_URI=${{ steps.docker-build.outputs.IMAGE_URI }}
          docker push $IMAGE_URI
