name: Build, Test, and Push Docker Image to ECR

on:
  pull_request:
    branches:
      - main
    paths:
      - 'node-app/**'      

env:
  REPO_NAME: temp-converter
  NODE_VERSION: '22'

defaults:
  run:
    working-directory: ./node-app

jobs:
  build-test-and-push:
    name: Build, Test, and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3
    # Step 3: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    # Step 4: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    # Step 5: Install dependencies and run tests
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Install dependencies
      run: npm install
    - name: Run tests
      id: run-tests
      run: npm test
    # Step 6: Get short SHA for tagging
    - name: Get short SHA
      id: get-sha
      run: echo "SHORT_SHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
    # Step 7: Build Docker image
    - name: Build Docker image
      id: build-image
      run: |
        IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:${{ env.SHORT_SHA }}
        docker build --platform linux/amd64 -t $IMAGE_URI .
    # Step 8: Push Docker image to ECR (conditionally)
    - name: Push Docker image to ECR
      if: success() && steps.run-tests.outcome == 'success'
      run: |
        IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:${{ env.SHORT_SHA }}
        docker push $IMAGE_URI
